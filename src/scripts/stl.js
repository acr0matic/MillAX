// {
//   "id":12,
//   "isSupport":false,
//   "stage":[
//      {
//         "name":"first",
//         "option":{
//            "material":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "construction":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "system":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "color":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "parameter":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "advanced":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
//         }
//      },
//      {
//         "name":"second",
//         "option":{
//            "material":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "construction":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "system":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "color":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "parameter":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ",
//            "advanced":"–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ"
//         }
//      }
//   ]
// }

const teethData = {};
let teethTempData = {};

const teeths = document.querySelectorAll('.stl-teeth__map .stl-teeth__item');
const teethPreviewContainer = document.querySelector('.stl-stage__teeth');

let currentTeeth = null;
let currentTeethId = null;
let currentStage = null;

function generateTeethData() {
  teethTempData['isSupport'] = false;
  teethTempData['stage'] = [];

  const stages = document.querySelectorAll('.stl-stage__tab');
  stages.forEach(stage => {
    teethTempData.stage.push({
      ['name']: stage.getAttribute('data-stl-stage'),
      ['option']: {
        ['material']: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        ['construction']: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        ['system']: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        ['color']: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        ['parameter']: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
        ['advanced']: '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ',
      },
    });
  });
}

teeths.forEach(teeth => {
  // –ü—Ä–æ–ø–∏—Å—ã–≤–∞–µ–º –∞–π–¥–∏ –∫–∞–∂–¥–æ–º—É –∑—É–±—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –≤–Ω—É—Ç—Ä–∏ –∑—É–±–∞
  teeth.setAttribute('data-teeth-id', teeth.querySelector('.stl-teeth__id').innerHTML.replace(/\s/g, ''));
  teeth.addEventListener('click', () => {

    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∑—É–± –∏ –µ–≥–æ –∞–π–¥–∏
    currentTeeth = teeth;
    currentTeethId = currentTeeth.getAttribute('data-teeth-id');

    currentStage = document.querySelector('.stl-stage__tab--active').getAttribute('data-stl-stage');

    // –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ
    teethTempData = {};
    generateTeethData();

    // –ü–æ–¥–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    if (teethData[currentTeethId])
      teethTempData = teethData[currentTeethId];

    updateInfo();

    // –û—á–∏—â–∞–µ–º –±–ª–æ–∫ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –∑—É–±–∞
    const clonedTeeth = teeth.cloneNode(true);
    clonedTeeth.classList.remove('stl-teeth__item--saved');
    teethPreviewContainer.innerHTML = '';
    teethPreviewContainer.append(clonedTeeth);

    stlSlider.slideNext();
  });
});

const saveButton = document.querySelector('[data-stl-action="save"]');
saveButton.addEventListener('click', () => {
  saveOptions(currentTeeth);
});

function saveOptions(teeth) {
  teethData[currentTeethId] = teethTempData;
  updateTooltips();

  console.log("–í—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –≤–Ω—É—Ç—Ä–∏ –∑—É–±–∞: ");
  console.log(teethTempData);
  console.log("–û–±—ä–µ–∫—Ç –≤—Å–µ—Ö –∑—É–±–æ–≤: ");
  console.log(teethData);

  teeth.classList.add('stl-teeth__item--saved')
}

/*******************************************************************/

const stlModals = document.querySelectorAll('.modal-stl');
const optionButtons = document.querySelectorAll('.stl-stage__button');

optionButtons.forEach(button => {
  const statusType = button.getAttribute('data-status');
  const status = document.querySelector('[data-status=' + statusType);
  const statusIcon = status.querySelector('.stl-stage__checkmark');

  stlModals.forEach(modal => {
    if (statusType === modal.getAttribute('data-status')) {
      const accept = modal.querySelector('.modal-stl__button');

      accept.addEventListener('click', () => {
        const selectedOption = modal.querySelectorAll(`input[name=${statusType}]:checked`);
        console.log("üöÄ ~ file: stl.js ~ line 100 ~ accept.addEventListener ~ selectedOption", selectedOption)

        if (selectedOption.length === 0) {
          teethTempDatateethTempData.stage[0].option[statusType] = '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ';
        }

        if (statusType === 'advanced') {
          teethTempData.stage[0].option[statusType] = [];

          if (selectedOption.length === 0) {
            teethTempData.stage[0].option[statusType] = ['–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ'];
            updateInfo();
          }
        }

        selectedOption.forEach(option => {
          const selected = option.getAttribute('type');

          if (selected === 'radio')
            teethTempData.stage[0].option[statusType] = getRadioValue(option);

          if (selected === 'checkbox')
            teethTempData.stage[0].option[statusType].push(getCheckboxValue(option));

            updateInfo();
        });

        // –ì–∞–ª–æ—á–∫–∏ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        statusIcon.classList.add('stl-stage__checkmark--visible');
      })
    }
  });
});

const teethInfoBlock = document.querySelector('.stl-stage__info');
const teethInfoItems = teethInfoBlock.querySelectorAll('.stl-info__item');

function getRadioValue(radio) {
  let parent = radio.closest('.radio')
  return parent.querySelector('.radio__label').innerHTML;
}

function getCheckboxValue(checkbox) {
  let parent = checkbox.closest('.checkbox')
  return parent.querySelector('.checkbox__label').innerHTML;
}

function updateInfo() {

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫—Ä—É–≥–∞
  optionButtons.forEach(button => {
    const statusType = button.getAttribute('data-status');
    const status = document.querySelector('[data-status=' + statusType);
    const statusIcon = status.querySelector('.stl-stage__checkmark');

    const value = teethTempData.stage[0].option[statusType];

    if (value !== '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
      statusIcon.classList.add('stl-stage__checkmark--visible');
    else
      statusIcon.classList.remove('stl-stage__checkmark--visible');
  });

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ –∑—É–±–∞
  teethInfoItems.forEach(item => {
    const dataType = item.getAttribute('data-stl-info');
    const output = item.querySelector('.stl-info__value');

    const value = teethTempData.stage[0].option[dataType];

    if (value !== '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
      output.innerHTML = value;
    else
      output.innerHTML = "–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ";
  });
}

let tippyInstances = [];
const singleton = tippy.createSingleton([], {
  placement: 'bottom',
  allowHTML: true,
  theme: 'millax',

  delay: 100,
});

function updateTooltips() {
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—É–ª—Ç–∏–ø–∞
  let isExist;
  tippyInstances.forEach(instance => {
    const instanceID = instance.reference.getAttribute('data-teeth-id');
    if (instanceID === currentTeethId)
      isExist = true;
  });

  if (isExist) return;

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞ –∏ —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
  tippyInstances.push(tippy(currentTeeth));
  singleton.setInstances(tippyInstances);

  tippyInstances.forEach(instance => {
    instance.reference.addEventListener('mouseover', () => {
      const teethID = instance.reference.getAttribute('data-teeth-id');
      if (teethData[teethID]) {
        instance.setContent(InfoTemplate(teethData[teethID]));
      }
    });
  });
}

function InfoTemplate(data) {
  return `
  <div class="stl-stage__info stl-info stl-info--mini">
  <div data-stl-info="construction" class="stl-info__item mb-1">
    <h3 class="stl-info__title">–ö–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è</h3>
    <div class="stl-info__value">${data.stage[0].option.construction}</div>
  </div>
  <!-- /.stl-info__item -->

  <div data-stl-info="system" class="stl-info__item mb-1">
    <h3 class="stl-info__title">–°–∏—Å—Ç–µ–º–∞ –∏–º–ø–ª–∞–Ω—Ç–æ–≤ –∏ —Ä–∞–∑–º–µ—Ä—ã</h3>
    <div class="stl-info__value">${data.stage[0].option.system}</div>
  </div>
  <!-- /.stl-info__item -->

  <div data-stl-info="material" class="stl-info__item mb-1">
    <h3 class="stl-info__title">–ú–∞—Ç–µ—Ä–∏–∞–ª –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è</h3>
    <div class="stl-info__value">${data.stage[0].option.material}</div>
  </div>
  <!-- /.stl-info__item -->

  <div data-stl-info="color" class="stl-info__item mb-1">
    <h3 class="stl-info__title">–¶–≤–µ—Ç –∫–æ—Ä–æ–Ω–∫–∏</h3>
    <div class="stl-info__value">${data.stage[0].option.color}</div>
  </div>
  <!-- /.stl-info__item -->

  <div data-stl-info="parameter" class="stl-info__item mb-1">
    <h3 class="stl-info__title">–î–µ—Å–Ω–µ–≤–∞—è —á–∞—Å—Ç—å</h3>
    <div class="stl-info__value">${data.stage[0].option.parameter}</div>
  </div>
  <!-- /.stl-info__item -->

  <div data-stl-info="advanced" class="stl-info__item">
    <h3 class="stl-info__title">–û–ø–∞–∫ –∏ –∫–∞—Ä–≤–∏–Ω–≥</h3>
    <div class="stl-info__value">${data.stage[0].option.advanced}</div>
  </div>
  <!-- /.stl-info__item -->
</div>
<!-- /.stl-stage__info -->
`
}